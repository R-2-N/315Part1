digit         [0-9]
alphabetic    [a-zA-Z]
alphanumeric  ({digit}|{alphabetic})
sign          [+-]
START   \/\*
END     \*\/
SIMPLE  [^*]
COMPLEX \*\/[^\/]
%%
;                             return(SEMICOLON);
,                             return(COMMA);
!=                            return(NOT_EQUALS);
!                           return(NOT);
or                            return(OR);
and                           return(AND);
xor                           return(XOR);
==                            return(EQUALS);
=                             return(ASSIGNMENT);
\<                             return(LESSER);
\<=                            return(LESSER_EQ);
\>                             return(LARGER);
\>=                            return(LARGER_EQ);
\%                             return(MODULUS);
\+                             return(PLUS);
\-                             return(MINUS);
\*                             return(MULTIPLICATION);
\/\/.*                            return(COMMENT);
{START}({SIMPLE}|{COMPLEX})*{END}                 return(COMMENT);
\/                             return(DIVISION);
\(                             return(LP);
\)                             return(RP);
\{                             return(LBRACE);
\}                             return(RBRACE);
(int|string|bool|float|double|char)                           return(TYPE);
(getHeading|getAltitude|getTime|ascend|descend|verticalStop|moveForward|moveBackward|horizontalStop|turnLeft1Deg|turnRight1Deg|enableSpray|disableSpray|input|output|connect|send|request)      return(PRIMITIVE_FUNCTION);
continue                      return(CONTINUE);
def                           return(DEF);
break                         return(BREAK);
return                        return(RETURN);
for                           return(FOR);
while                         return(WHILE);
do                            return(DO);
if                            return(IF);
else                          return(ELSE);
(true)|(false)                return(BOOLEAN);
{sign}?{digit}+                return(INTEGER);
{sign}?{digit}+\.{digit}+     return(FLOAT);
{alphabetic}+{alphanumeric}*  return(VARIABLE);
\"([^\"\\]*(\\.[^\"\\]*)*)\"      return(STRING);
%%
int yywrap() { return 1; }